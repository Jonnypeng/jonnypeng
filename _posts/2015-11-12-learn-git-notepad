---
layout: post
title:  "learn-git-notepad"
date:   2015-11-12 24:43:06
categories: jonnypeng update
---
ssh-keygen -t rsa -C "jonny.peng@qq.com" #生成自己的公钥
git config --list #列出所有的配置
git config <key> #根据选项查询配置
git init 
git add #可以跟踪新文件;还可以将修改后的已跟踪文件放入暂存区;还能够将已冲突的文件标识为已解决
git add -A 
git add -u
git commit -m "first upload"
git commit -v "默认将diff内容植入到提交信息中"
git commit -a #不用提交到暂存区,绕开了"git add",直接提交到版本库中,这种行为一般不可取
git commit --amend 重新提交在暂存区的内容，此次提交合并为上一次提交，依然是上一次提交的信息
git config --global user.name "name"
git config --global user.email "email"
git push origin master 推送到默认的远程分支
git push <remote_name> <branch_name> 推送到特定的远程分支上
git push <remote_name> <branch_name_from>:<branch_name_to> 推送到新创建的特定的远程分支上
git push <remote_name> --delete <branch_name> #删除特定的远程分支
git fetch #抓取远程分支上相对应本地分支所没有的数据到本地分支，不会改变工作目录
git pull #相当于 git fetch -> git merge 的连续使用
git diff #比较工作区与暂存区之间的差异
git diff HEAD #比较工作区与HEAD之间的差异
git diff HEAD origin/master #比较版本库与远程仓库的差异
git diff --cached 或者 git diff --staged #比较暂存区与HEAD之间的差异
git diff -u 原始文件名>diff.text  #查阅此文件的修改情况,并保存为diff.text
git status -s #状态简洁的模式
git status -s -b #状态简洁的模式的同时,告知分支的名称
git reset HEAD <file> #将文件从暂存区中删除掉，工作区不受影响
git rm --cached<file> #直接删除暂存区的内容,工作区不做出改变
git rm <file> #删除跟踪文件列表中的某个文件，并可以进行提交
git rm -f <file> #删除已经提交到暂存区的已修改文件
git rm --cached <file> #将仓库中的已跟踪文件转变为未跟踪文mt t status
git checkout . 或者 git checkout -- <file> #将暂存区的文件替换工作区的文件,此操作会清除掉未添加到暂存区的所有修改
git checkout HEAD . 或者 git checkout HEAD <file> #将master分支中的文件替换为暂存区与工作区的文件,不仅会清除工作区的修改,还会清除暂存区的内容
git ls-tree -l HEAD #查阅版本库中当前提交所指向的目录树,-l 参数就是显示文件的大小
git ls-files -s[--stage] #查阅暂存区域中所有文件的目录树
git ls-tree origin/master #查询远程仓库的目录树
git clean -fd #清除当前工作区中的非跟踪文件和目录(未加入版本库的文件和目录)
git stash #保存工作进度,但是工作区的内容与暂存区的内容会被封存
git reflog #快速查看引用日志
git log --pretty=raw #查看版本库的对象
git log --pretty=oneline #以单行方式查阅提交差异
git log --pretty=short #以最简洁方式查阅提交差异，其中不显示时间戳
git log --pretty=format #定制要记录的显示格式
git log --abbrev-commit --pretty=oneline #显示简短而唯一的缩写方式
git log -p #显示每次提交的内容差异
git log -p -<number> #显示最近n次提交的内容差异,例如是最近2次，则为 git log -p -2
git log --since=2.week #显示最近两周的提交内容
git log --stat #以简洁方式查阅提交的内容差异
git log --decorate #查看各个分支当前所指的对象
git log --oneline --decorate --graph --all #查阅分支历史、提交的历史
git log <branch_name_merge>..<branch_name_target> 查阅被合并分支未在合并分支下的所完成的部分提交  
git log ^<branch_a> <branch_b> <branch_c> 查阅bt 与c的提交中并不包含a的提交
git log <branch_b> <branch_c> --not <branch_a> 查阅b与c的提交中并不包含a的提交
git log <branch_a>...<branch_b> 查阅a与b共同所包含的提交
git log origin/master..HEAD 查阅在本地仓库HEAD位置相对远程仓库所没有的提交
git grep <file> #搜索关键词
git cat-file -t ID #查阅对象ID所对应的类型
git cat-file -p ID #查阅对象ID所对应的内容
git mv <file_from> <file_to> #将文件名进行更改,这个命令相当于"mv file_form file_to""git rm file_form""git add file_to"
git remote #查看远程仓库的简写名称
git remote -v #查看远程仓库的地址
git remote add <shortname> <url> #添加一个新的远程GIT仓库,并对其进行简写命名
git remote show <shortname> #以远程仓库名显示远程仓库的详细信息
git remote rename <shortname_from> <shortname_to> #更改远程仓库的名字
git remote rm <shortname> #删除远程仓库的链接
git tag -a <tagname> -m "<meesage>" #创建一个附注标签并提交一个信息
git tag <tagname> #直接创建一个轻量的标签
git tag <tagname> <%H> #为提交信息的哈希字串所对应之版本创建轻量的标签*创建附注标签则同理
git tag -d <tagname> #删除标签
git show <tagname> #显示这个版本号所提交的相关信息
git push origin <tagname> #远程推送标签
git push origin --tags #一次性远程推送所在版本库的所有未推送标签
git branch <branch_name> #创建一个分支
git branch -d <branch_name> #删除另外一个分支
git branch -D <branch_name> #强制删除一个正在进行中的分支
git branch --merged #查看哪些分支已经合并到了当前分支
git branch --no-merged #查看未合并的正在进行中的分支
git branch --set-upstream-to <remote_name>/<branch_name> #将所在分支重新设置跟踪特定的远程分支，相同的语法为git branch -u <remote_name>/<branch_name> 
git branch -v 显示本地分支
git branch -vv 显示本地分支及所对应的远程分支
git checkout <branch_name> #切换到已存在的那个分支中
git checkout <branch_name> <tagname> #检出版本库的一个标签并创建到一个分支中去
git checkout -b <branch_name> #在所在的分支上建立一个新的分支，并且切换到那个新的分支上，相当于git branch <branch_name> -> git checkout <branch_name>
git checkout -b <branch_name> <remote_name>/<branch_name> #在本地创建并切换到与远程分支所对应的分支,这个命令的快捷方式为 git checkout --track <remote_name>/<branch_name>
git checkout -b <branch_to> <remote_name>/<branch_from> #创建并切换一个与远程分支命名不一样的具有对应关系的本地分支
git merge <branch_name> #将分支<branch_name>合并到目前所在的分支上
git merge <remote_name>/<branch_name> #将远程的特定分支合并带本地分支上
git mergetool #选择合并工具进行合并
git rebase <branch_name_to> <branch_name_from> #将目标分支的历史提交重演至所在分支
git rebase --continue #继续变基
git rebase --skip #跳开变基
git reset HEAD <file> #从暂存区将文件移除
